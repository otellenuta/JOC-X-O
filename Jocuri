int[,] tabla = new int[3,3]; 
 
while (VerificaCastig(tabla) == 0 && JocFinisat(tabla) == false)
{
    MiscareJucator(tabla, 1);
    if (VerificaCastig(tabla) != 0 || JocFinisat(tabla))
        break;
    MiscareJucator(tabla, 2);
}
 
static int VerificaCastig(int[,] tabla)
{
    bool verificare = false; 
    for (int i = 0; i < tabla.GetLength(0); i++)
    {
        verificare = true;
        for (int j = 0; j < tabla.GetLength(1) - 1; j++)
        {
            if (tabla[i, j] != tabla[i, j+1])
            {
                verificare = false;                
            }           
        }
        if (verificare == true && tabla[i, 0] != 0)
        {
            Console.WriteLine("Jucatorul " + TransformaXsau0(tabla[i, 0]) + " a castigat!");
            return tabla[i,0];
        }
    }

    for (int j = 0; j < tabla.GetLength(1); j++)
    {
        verificare = true;
        for (int i = 0; i < tabla.GetLength(0)-1; i++)
        {
            if (tabla[i, j] != tabla[i + 1, j])
            {
                verificare = false;
            }
        }
        if (verificare == true && tabla[0, j] != 0)
        {
            Console.WriteLine("Jucatorul " + TransformaXsau0(tabla[0, j]) + " a castigat!");
            return tabla[0, j];
        }
    }
    
    if (TablaPatrata(tabla) == true)
    {
        verificare = true; 
        for (int i = 0; i < tabla.GetLength(0) - 1; i++)
        {
            if (tabla[i, i] != tabla[i + 1, i + 1])
            {
                verificare = false;
                break; 
            }
        }
        if (verificare == true && tabla[tabla.GetLength(0) - 1, tabla.GetLength(0) - 1] != 0)
        {
            Console.WriteLine("Jucatorul " + TransformaXsau0(tabla[0, 0]) + " a castigat!");
            return tabla[0, 0];
        }

        verificare = true; 
        for (int i = 0; i < tabla.GetLength(0) - 1; i++)
        {
            if (tabla[i, tabla.GetLength(0) - i - 1] != tabla[i + 1, tabla.GetLength(0) - (i + 1) - 1])
            {
                verificare = false;
                break; 
            }
        }
        if (verificare == true && tabla[tabla.GetLength(0) - 1, 0] != 0)
        {
            Console.WriteLine("Jucatorul " + TransformaXsau0(tabla[0, tabla.GetLength(0) - 1]) + " a castrigat!");
            return tabla[0, tabla.GetLength(0) - 1];
        }
    }
    return 0; 
}
 
static bool TablaPatrata(int[,] tabla) 
{
    if(tabla.GetLength(0) != tabla.GetLength(1))
    {
        return false; 
    }    
    return true;
}   
 
void MiscareJucator(int[,] tabla, int jucator)                                                  
{                                                                                                                                                                                                                                                                                         
    int rand, coloana;                                                                                                                                                                                                              
    do
    {                                                                                                                           
        Console.WriteLine("Jucatorul " + jucator + ", introduceti randul si coloana la care vreti sa plasati caracterul");  
        GetRandSiColoana(out rand, out coloana); 
        if (rand >= tabla.GetLength(0) || coloana >= tabla.GetLength(1))
        {
            Console.WriteLine("Valori invalide, mai incearca!");
            continue;
        }
        if (AdaugaXSauO(tabla, jucator, rand, coloana))
        {
            break;
        }
    }
    while (true);   
    AfiseazaTabla(tabla);
 
    if (JocFinisat(tabla)) 
    {
        Console.WriteLine();
        Console.WriteLine("Miscarile s-au finisat!");
        Console.WriteLine();
        Console.WriteLine("JOC FINISAT! INCEPETI ALT JOC");
        return;           
    }
}
 
 
void GetRandSiColoana(out int rand, out int coloana)
{
    rand = int.Parse(Console.ReadLine());
    coloana = int.Parse(Console.ReadLine());
}
 
static bool AdaugaXSauO(int[,] tabla, int caracter, int rand, int coloana) 
{   
    if (tabla[rand, coloana] == 0)
    {
        tabla[rand, coloana] = caracter;
        return true;
    }
    else 
    { 
        for (int i = 0; i < tabla.GetLength(0); i++)
        {
            for (int j = 0; j < tabla.GetLength(1); j++)
            {
                if (tabla[i, j] == 0)
                {
                    Console.WriteLine("Incearca alte pozitii!");
                    Console.WriteLine();
                    return false;
                }               
            }                      
        }           
    }
    return false;
}
  
static char TransformaXsau0(int numar)
{
    if (numar == 1)
    {
        return 'X';
    }
    if (numar == 2)
    {
        return 'O';
    }
    return '-';
}
  
static bool JocFinisat(int[,] tabla)
{
    for (int i = 0; i < tabla.GetLength(0); i++)
    {
        for (int j = 0; j < tabla.GetLength(1); j++)
        {
            if (tabla[i, j] == 0)
            {
                return false;
            }
        }                  
    }
    return true;
}
  
static void AfiseazaTabla(int[,] tabla) 
{
    for (int i = 0; i < tabla.GetLength(0); i++)
    {       
        for (int j = 0; j < tabla.GetLength(1); j++)
        {
            if (tabla[i, j] == 0 )
            {
                Console.Write(" ");
            }
            else if (tabla[i, j] == 1)
            {
                Console.Write("X");
            }
            else if (tabla[i, j] == 2)
            {
                Console.Write("O");
            }
            if (j < tabla.GetLength(1) - 1)
            {
                Console.Write("|");
            }
        }
        Console.WriteLine();
        if (i < tabla.GetLength(0) - 1)
        {
            for (int k = 0;  k < tabla.GetLength(1) * 2 - 1;  k++)
            {
                Console.Write("-");
            }
        }
        Console.WriteLine();
    }
}
